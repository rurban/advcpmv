diff --git doc/coreutils.texi doc/coreutils.texi
index de1f2eb36..82af6768a 100644
--- doc/coreutils.texi
+++ doc/coreutils.texi
@@ -8535,6 +8535,12 @@ This option is independent of the @option{--interactive} or
 This option is ignored when the @option{--no-clobber} or @option{-n} option
 is also used.
 
+@item -g
+@itemx --progress-bar
+@opindex -g
+@opindex --progress-bar
+Display a progress bar while copying.
+
 @item -H
 @opindex -H
 If a command line argument specifies a symbolic link, then copy the
@@ -9642,6 +9648,12 @@ options, only the final one takes effect.
 @end macro
 @mvOptsIfn
 
+@item -g
+@itemx --progress-bar
+@opindex -g
+@opindex --progress-bar
+Display a progress bar while moving.
+
 @item -i
 @itemx --interactive
 @opindex -i
diff --git src/copy.c src/copy.c
index 165c5cebb..46897aa92 100644
--- src/copy.c
+++ src/copy.c
@@ -128,6 +128,65 @@ struct dir_list
   dev_t dev;
 };
 
+struct progress_status {
+  int iCountDown;
+  char ** cProgressField;
+  struct timeval last_time;
+  int last_size, iBarLength;
+  struct stat src_open_sb;
+};
+
+static void file_progress_bar (char * cDest, int iBarLength,
+                               long lProgress, long lTotal)
+{
+  double dPercent = (double) lProgress / (double) lTotal * 100.f;
+  sprintf(cDest + (iBarLength - 6), "%4.1f", dPercent);
+  cDest[iBarLength - 2] = ' ';
+
+  int i;
+  for (i=1; i<=iBarLength - 9; i++)
+    {
+      if (dPercent > (double) (i-1) / (iBarLength - 10) * 100.f)
+        cDest[i] = '=';
+      else
+        cDest[i] = ' ';
+    }
+  for (i=1; i<iBarLength - 9; i++)
+    {
+      if ((cDest[i+1] == ' ') && (cDest[i] == '='))
+        cDest[i] = '>';
+    }
+}
+
+int file_size_format (char * cDst, long lSize, int iCounter)
+{
+  double dSize = (double) lSize;
+  while ( dSize >= 1000.0 )
+  {
+    dSize /= 1024.0;
+    iCounter++;
+  }
+
+  /* get unit */
+  char *sUnit;
+  if (iCounter == 0)
+    sUnit = "B";
+  else if (iCounter == 1)
+    sUnit = "KiB";
+  else if (iCounter == 2)
+    sUnit = "MiB";
+  else if (iCounter == 3)
+    sUnit = "GiB";
+  else if (iCounter == 4)
+    sUnit = "TiB";
+  else
+    sUnit = "N/A";
+
+  /* write number */
+  return sprintf (cDst, "%5.1f %s", dSize, sUnit);
+}
+
+
 /* Initial size of the cp.dest_info hash table.  */
 #define DEST_INFO_INITIAL_CAPACITY 61
 
@@ -224,7 +283,8 @@ sparse_copy (int src_fd, int dest_fd, char *buf, size_t buf_size,
              size_t hole_size, bool punch_holes,
              char const *src_name, char const *dst_name,
              uintmax_t max_n_read, off_t *total_n_read,
-             bool *last_write_made_hole)
+             bool *last_write_made_hole,
+             struct progress_status *s_progress)
 {
   *last_write_made_hole = false;
   *total_n_read = 0;
@@ -233,6 +293,85 @@ sparse_copy (int src_fd, int dest_fd, char *buf, size_t buf_size,
 
   while (max_n_read)
     {
+
+    if (progress)
+      {
+        /* update countdown */
+        s_progress->iCountDown--;
+        char * sProgressBar = s_progress->cProgressField[5];
+        if (s_progress->iCountDown < 0)
+          s_progress->iCountDown = 100;
+
+        /* just print one line with the percentage, but not always */
+        if (s_progress->iCountDown == 0)
+          {
+            /* calculate current speed */
+            struct timeval cur_time;
+            gettimeofday ( & cur_time, NULL );
+            int cur_size = g_iTotalWritten + *total_n_read / 1024;
+            int usec_elapsed = cur_time.tv_usec - s_progress->last_time.tv_usec;
+            double sec_elapsed = (double) usec_elapsed / 1000000.f;
+            sec_elapsed += (double) (cur_time.tv_sec - s_progress->last_time.tv_sec);
+            int copy_speed = (int) ( (double) (cur_size - s_progress->last_size)
+                                     / sec_elapsed );
+            char s_copy_speed[20];
+            file_size_format (s_copy_speed, copy_speed, 1);
+            /* update vars */
+            s_progress->last_time = cur_time;
+            s_progress->last_size = cur_size;
+
+            /* how many time has passed since the start? */
+            int isec_elapsed = cur_time.tv_sec - g_oStartTime.tv_sec;
+            int sec_remaining = (int) ( (double) isec_elapsed / cur_size
+                                        * g_iTotalSize) - isec_elapsed;
+            int min_remaining = sec_remaining / 60;
+            sec_remaining -= min_remaining * 60;
+            int hours_remaining = min_remaining / 60;
+            min_remaining -= hours_remaining * 60;
+            /* print out */
+            sprintf (s_progress->cProgressField[3],
+                     "Copying at %s/s (about %uh %um %us remaining)", s_copy_speed,
+                     hours_remaining, min_remaining, sec_remaining );
+
+            int fs_len;
+            if (g_iTotalFiles > 1)
+              {
+                /* global progress bar */
+                file_progress_bar (s_progress->cProgressField[2], s_progress->iBarLength,
+                                   g_iTotalWritten + *total_n_read / 1024, g_iTotalSize );
+
+                /* print the global status */
+                fs_len = file_size_format (s_progress->cProgressField[1] +
+                                           s_progress->iBarLength - 21,
+                                           g_iTotalWritten + *total_n_read / 1024, 1);
+                s_progress->cProgressField[1][s_progress->iBarLength - 21 + fs_len] = ' ';
+              }
+
+            /* current progress bar */
+            file_progress_bar (sProgressBar, s_progress->iBarLength, *total_n_read,
+                               s_progress->src_open_sb.st_size);
+
+            /* print the status */
+            fs_len = file_size_format (s_progress->cProgressField[4] +
+                                       s_progress->iBarLength - 21, *total_n_read, 0);
+            s_progress->cProgressField[4][s_progress->iBarLength - 21 + fs_len] = ' ';
+
+            /* print the field */
+            int it;
+            for (it = g_iTotalFiles>1 ? 0 : 3; it < 6; it++)
+              {
+                printf ("\033[K%s\n", s_progress->cProgressField[it]);
+                if (strlen (s_progress->cProgressField[it]) < s_progress->iBarLength)
+                  printf ("");
+              }
+            if (g_iTotalFiles > 1)
+              printf ("\r\033[6A");
+            else
+              printf ("\r\033[3A");
+            fflush (stdout);
+          }
+      }
+
       ssize_t n_read = read (src_fd, buf, MIN (max_n_read, buf_size));
       if (n_read < 0)
         {
@@ -319,6 +458,13 @@ sparse_copy (int src_fd, int dest_fd, char *buf, size_t buf_size,
          certain files in /proc or /sys with linux kernels.  */
     }
 
+    if (progress)
+      {
+        /* update total size */
+        g_iTotalWritten += *total_n_read / 1024;
+        g_iFilesCopied++;
+      }
+
   /* Ensure a trailing hole is created, so that subsequent
      calls of sparse_copy() start at the correct offset.  */
   if (make_hole && ! create_hole (dest_fd, dst_name, punch_holes, psize))
@@ -387,7 +533,9 @@ extent_copy (int src_fd, int dest_fd, char *buf, size_t buf_size,
              size_t hole_size, off_t src_total_size,
              enum Sparse_type sparse_mode,
              char const *src_name, char const *dst_name,
-             bool *require_normal_copy)
+             bool *require_normal_copy,
+             int iCountDown, char ** cProgressField, struct timeval last_time,
+             int last_size, int iBarLength, struct stat src_open_sb)
 {
   struct extent_scan scan;
   off_t last_ext_start = 0;
@@ -518,10 +666,18 @@ extent_copy (int src_fd, int dest_fd, char *buf, size_t buf_size,
               last_ext_len = ext_len;
               bool read_hole;
 
-              if ( ! sparse_copy (src_fd, dest_fd, buf, buf_size,
-                                  sparse_mode == SPARSE_ALWAYS ? hole_size: 0,
-                                  true, src_name, dst_name, ext_len, &n_read,
-                                  &read_hole))
+              struct timeval a;
+              struct stat b;
+
+              struct progress_status s_progress = {
+                 iCountDown, cProgressField, last_time,
+                 last_size, iBarLength, src_open_sb};
+
+
+              if (! sparse_copy (src_fd, dest_fd, buf, buf_size,
+                                 sparse_mode == SPARSE_ALWAYS ? hole_size: 0,
+                                 true, src_name, dst_name, ext_len, &n_read,
+                                 &read_hole, &s_progress))
                 goto fail;
 
               dest_pos = ext_start + n_read;
@@ -1270,6 +1426,70 @@ copy_reg (char const *src_name, char const *dst_name,
       buf_alloc = xmalloc (buf_size + buf_alignment);
       buf = ptr_align (buf_alloc, buf_alignment);
 
+      /* create a field of 6 lines */
+      char ** cProgressField = (char **) calloc (6, sizeof (char*));
+      /* get console width */
+      int iBarLength = 80;
+      struct winsize win;
+      if ( ioctl (STDOUT_FILENO, TIOCGWINSZ, (char *) &win) == 0 && win.ws_col > 0)
+         iBarLength = win.ws_col;
+      /* create rows */
+      int it;
+      for ( it = 0; it < 6; it++ )
+      {
+        cProgressField[it] = (char *) malloc (iBarLength + 1);
+        /* init with spaces */
+        int j;
+        for ( j = 0; j < iBarLength; j++ )
+          cProgressField[it][j] = ' ';
+        cProgressField[it][iBarLength] = '\0';
+      }
+
+      /* global progress bar? */
+      if ( g_iTotalFiles > 1 )
+      {
+        /* init global progress bar */
+        cProgressField[2][0] = '[';
+        cProgressField[2][iBarLength - 8] = ']';
+        cProgressField[2][iBarLength - 7] = ' ';
+        cProgressField[2][iBarLength - 1] = '%';
+
+        /* total size */
+        cProgressField[1][iBarLength - 11] = '/';
+        file_size_format ( cProgressField[1] + iBarLength - 9, g_iTotalSize, 1 );
+
+        /* show how many files were written */
+        int sum_length = sprintf (cProgressField[1], "%d files copied so far...",
+                                  g_iFilesCopied);
+        cProgressField[1][sum_length] = ' ';
+      }
+
+      /* truncate filename? */
+      int fn_length;
+      if (strlen (src_name) > iBarLength - 22)
+        fn_length =
+          sprintf (cProgressField[4], "...%s",
+                   src_name + (strlen (src_name) - iBarLength + 25));
+      else
+        fn_length = sprintf (cProgressField[4], "%s", src_name);
+      cProgressField[4][fn_length] = ' ';
+
+      /* filesize */
+      cProgressField[4][iBarLength - 11] = '/';
+      file_size_format (cProgressField[4] + iBarLength - 9, src_open_sb.st_size, 0);
+
+      int iCountDown = 1;
+      char * sProgressBar = cProgressField[5];
+      sProgressBar[0] = '[';
+      sProgressBar[iBarLength - 8] = ']';
+      sProgressBar[iBarLength - 7] = ' ';
+      sProgressBar[iBarLength - 1] = '%';
+
+      /* this will always save the time in between */
+      struct timeval last_time;
+      gettimeofday (& last_time, NULL);
+      int last_size = g_iTotalWritten;
+
       if (sparse_src)
         {
           bool normal_copy_required;
@@ -1281,7 +1501,9 @@ copy_reg (char const *src_name, char const *dst_name,
           if (extent_copy (source_desc, dest_desc, buf, buf_size, hole_size,
                            src_open_sb.st_size,
                            make_holes ? x->sparse_mode : SPARSE_NEVER,
-                           src_name, dst_name, &normal_copy_required))
+                           src_name, dst_name, &normal_copy_required,
+                           iCountDown, cProgressField, last_time, last_size,
+                           iBarLength, src_open_sb))
             goto preserve_metadata;
 
           if (! normal_copy_required)
@@ -1293,11 +1515,13 @@ copy_reg (char const *src_name, char const *dst_name,
 
       off_t n_read;
       bool wrote_hole_at_eof;
+      struct progress_status s_progress = { iCountDown, cProgressField, last_time,
+                                            last_size, iBarLength, src_open_sb};
       if (! sparse_copy (source_desc, dest_desc, buf, buf_size,
                          make_holes ? hole_size : 0,
                          x->sparse_mode == SPARSE_ALWAYS, src_name, dst_name,
                          UINTMAX_MAX, &n_read,
-                         &wrote_hole_at_eof))
+                         &wrote_hole_at_eof, &s_progress))
         {
           return_val = false;
           goto close_src_and_dst_desc;
@@ -1308,6 +1532,13 @@ copy_reg (char const *src_name, char const *dst_name,
           return_val = false;
           goto close_src_and_dst_desc;
         }
+      if (progress)
+        {
+          int i;
+          for (i = 0; i < 6; i++)
+            free (cProgressField[i]);
+          free (cProgressField);
+        }
     }
 
 preserve_metadata:
diff --git src/copy.h src/copy.h
index eef5663b4..a461dd074 100644
--- src/copy.h
+++ src/copy.h
@@ -234,6 +234,9 @@ struct cp_options
      Create destination directories as usual. */
   bool symbolic_link;
 
+  /* If true, draw a nice progress bar on screen */
+  bool progress_bar;
+
   /* If true, do not copy a nondirectory that has an existing destination
      with the same or newer modification time. */
   bool update;
@@ -300,4 +303,13 @@ void cp_options_default (struct cp_options *);
 bool chown_failure_ok (struct cp_options const *) _GL_ATTRIBUTE_PURE;
 mode_t cached_umask (void);
 
+int file_size_format (char *cDst, long lSize, int iCounter);
+
+long g_iTotalSize;
+long g_iTotalWritten;
+int g_iFilesCopied;
+struct timeval g_oStartTime;
+int g_iTotalFiles;
+bool progress;
+
 #endif
diff --git src/cp.c src/cp.c
index 6743f1036..a04f58c42 100644
--- src/cp.c
+++ src/cp.c
@@ -141,6 +141,7 @@ static struct option const long_opts[] =
   {"symbolic-link", no_argument, NULL, 's'},
   {"target-directory", required_argument, NULL, 't'},
   {"update", no_argument, NULL, 'u'},
+  {"progress-bar", no_argument, NULL, 'g'},
   {"verbose", no_argument, NULL, 'v'},
   {GETOPT_SELINUX_CONTEXT_OPTION_DECL},
   {GETOPT_HELP_OPTION_DECL},
@@ -180,6 +181,7 @@ Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n\
   -f, --force                  if an existing destination file cannot be\n\
                                  opened, remove it and try again (this option\n\
                                  is ignored when the -n option is also used)\n\
+  -g, --progress-bar           add a progress bar\n\
   -i, --interactive            prompt before overwrite (overrides a previous -n\
 \n\
                                   option)\n\
@@ -635,6 +637,68 @@ do_copy (int n_files, char **file, const char *target_directory,
              quoteaf (file[n_files - 1]));
     }
 
+  struct timeval start_time;
+  if (progress)
+    {
+      g_iTotalSize = 0;
+      g_iTotalFiles = 0;
+      g_iFilesCopied = 0;
+      g_iTotalWritten = 0;
+
+      /* save time */
+      gettimeofday (&start_time, NULL);
+      g_oStartTime = start_time;
+
+      printf ( "Calculating total size... \r" );
+      fflush ( stdout );
+      long iTotalSize = 0;
+      int iFiles = n_files;
+      if ( ! target_directory )
+        iFiles = n_files - 1;
+      int j;
+
+      /* how many files are we copying */
+      char command[1024];
+      sprintf( command, "find \"%s\" -type f | wc -l", file[0]);
+      FILE *fp ;
+      char output[1024];
+      fp = popen(command,"r");
+      if (fp == NULL || fgets(output, sizeof(output)-1, fp) == NULL)
+        printf("failed to run find.\n");
+      else
+        g_iTotalFiles = atoi (output);
+
+      for (j = 0; j < iFiles; j++)
+        {
+          /* call du -s for each file */
+          /* create command */
+          char command[1024];
+          sprintf ( command, "du -s \"%s\"", file[j] );
+          /* TODO: replace all quote signs in file[i] */
+
+          FILE *fp;
+          char output[1024];
+
+          /* run command */
+          fp = popen(command, "r");
+          if (fp == NULL || fgets(output, sizeof(output)-1, fp) == NULL) {
+            printf("failed to run du.\n" );
+          }
+          else
+            {
+              /* isolate size */
+              strchr ( output, '\t' )[0] = '\0';
+              iTotalSize += atol ( output );
+
+              printf ( "Calculating total size... %ld\r", iTotalSize );
+              fflush ( stdout );
+            }
+          pclose(fp);
+        }
+      g_iTotalSize = iTotalSize;
+    }
+
+
   if (target_directory)
     {
       /* cp file1...filen edir
@@ -776,6 +840,46 @@ do_copy (int n_files, char **file, const char *target_directory,
       ok = copy (source, new_dest, 0, x, &unused, NULL);
     }
 
+    if (progress)
+      {
+        /* remove everything */
+        int i;
+        if (g_iTotalFiles > 1)
+        {
+          for (i = 0; i < 6; i++)
+            printf ("\033[K\n");
+          printf ("\r\033[6A");
+        }
+        else
+        {
+          for (i = 0; i < 3; i++)
+            printf ("\033[K\n");
+          printf ("\r\033[3A");
+        }
+
+        /* save time */
+        struct timeval end_time;
+        gettimeofday (&end_time, NULL);
+        int usec_elapsed = end_time.tv_usec - start_time.tv_usec;
+        double sec_elapsed = (double) usec_elapsed / 1000000.f;
+        sec_elapsed += (double) (end_time.tv_sec - start_time.tv_sec);
+
+        /* get total size */
+        char sTotalWritten[20];
+        file_size_format (sTotalWritten, g_iTotalSize, 1);
+        /* TODO: using g_iTotalWritten would be more correct, but is less accurate */
+
+        /* calculate speed */
+        int copy_speed = (int) ((double) g_iTotalWritten / sec_elapsed);
+        char s_copy_speed[20];
+        file_size_format (s_copy_speed, copy_speed, 1);
+
+        /* good-bye message */
+        printf ("%d files (%s) copied in %.1f seconds (%s/s).\n",
+                g_iFilesCopied, sTotalWritten,
+                sec_elapsed, s_copy_speed);
+    }
+
   return ok;
 }
 
@@ -811,6 +915,7 @@ cp_option_init (struct cp_options *x)
   x->recursive = false;
   x->sparse_mode = SPARSE_AUTO;
   x->symbolic_link = false;
+  x->progress_bar = false;
   x->set_mode = false;
   x->mode = 0;
 
@@ -949,7 +1054,7 @@ main (int argc, char **argv)
   selinux_enabled = (0 < is_selinux_enabled ());
   cp_option_init (&x);
 
-  while ((c = getopt_long (argc, argv, "abdfHilLnprst:uvxPRS:TZ",
+  while ((c = getopt_long (argc, argv, "abdfgHilLnprst:uvxPRS:TZ",
                            long_opts, NULL))
          != -1)
     {
@@ -1006,6 +1111,10 @@ main (int argc, char **argv)
           x.unlink_dest_after_failed_open = true;
           break;
 
+        case 'g':
+          progress = true;
+          break;
+
         case 'H':
           x.dereference = DEREF_COMMAND_LINE_ARGUMENTS;
           break;
diff --git src/mv.c src/mv.c
index 9e80193df..cd83f8332 100644
--- src/mv.c
+++ src/mv.c
@@ -65,6 +65,7 @@ static struct option const long_options[] =
   {"target-directory", required_argument, NULL, 't'},
   {"update", no_argument, NULL, 'u'},
   {"verbose", no_argument, NULL, 'v'},
+  {"progress-bar", no_argument, NULL, 'g'},
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
   {NULL, 0, NULL, 0}
@@ -165,10 +166,82 @@ target_directory_operand (char const *file)
 static bool
 do_move (const char *source, const char *dest, const struct cp_options *x)
 {
+  struct timeval start_time;
+
   bool copy_into_self;
   bool rename_succeeded;
+  if (progress && x->rename_errno != 0)
+    {
+      g_iTotalSize = 0;
+      g_iFilesCopied = 0;
+      g_iTotalWritten = 0;
+
+      gettimeofday (&start_time, NULL);
+      g_oStartTime = start_time;
+
+      printf ("Calculating total size... \r");
+      fflush (stdout);
+      long iTotalSize = 0;
+      /* call du -s for each file */
+      /* create command */
+      char command[1024];
+      sprintf ( command, "du -s '%s'", source );
+      /* TODO: replace all quote signs in file[i] */
+
+      FILE *fp;
+      char output[1024];
+
+      /* run command */
+      fp = popen(command, "r");
+      if (fp == NULL || fgets(output, sizeof(output)-1, fp) == NULL) {
+        //printf("failed to run du.\n" );
+      }
+      else
+        {
+          /* isolate size */
+          strchr ( output, '\t' )[0] = '\0';
+          iTotalSize += atol ( output );
+          printf ("Calculating total size... %ld\r", iTotalSize);
+          fflush (stdout);
+        }
+
+      pclose (fp);
+      g_iTotalSize = iTotalSize;
+    }
+
   bool ok = copy (source, dest, false, x, &copy_into_self, &rename_succeeded);
 
+  if (progress && (x->rename_errno != 0 && ok))
+    {
+      /* remove everything */
+      int i;
+      int limit = (g_iTotalFiles > 1 ? 6 : 3);
+      for (i=0; i < limit; i++)
+        printf ("\033[K\n");
+      printf ("\r\033[3A");
+
+      /* save time */
+      struct timeval end_time;
+      gettimeofday (&end_time, NULL);
+      int usec_elapsed = end_time.tv_usec - start_time.tv_usec;
+      double sec_elapsed = (double) usec_elapsed / 1000000.f;
+      sec_elapsed += (double) (end_time.tv_sec - start_time.tv_sec);
+
+      /* get total size */
+      char sTotalWritten[20];
+      file_size_format (sTotalWritten, g_iTotalSize, 1);
+      /* TODO: using g_iTotalWritten would be more correct, but is less accurate */
+
+      /* calculate speed */
+      int copy_speed = (int) ((double) g_iTotalWritten / sec_elapsed);
+      char s_copy_speed[20];
+      file_size_format (s_copy_speed, copy_speed, 1);
+
+      /* good-bye message */
+      printf ("%d files (%s) moved in %.1f seconds (%s/s).\n",
+              g_iFilesCopied, sTotalWritten, sec_elapsed, s_copy_speed);
+    }
+
   if (ok)
     {
       char const *dir_to_remove;
@@ -303,6 +376,7 @@ Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\n\
 \n\
   -b                           like --backup but does not accept an argument\n\
   -f, --force                  do not prompt before overwriting\n\
+  -g, --progress-bar           add progress-bar\n\
   -i, --interactive            prompt before overwrite\n\
   -n, --no-clobber             do not overwrite an existing file\n\
 If you specify more than one of -i, -f, -n, only the final one takes effect.\n\
@@ -358,7 +432,7 @@ main (int argc, char **argv)
   /* Try to disable the ability to unlink a directory.  */
   priv_set_remove_linkdir ();
 
-  while ((c = getopt_long (argc, argv, "bfint:uvS:TZ", long_options, NULL))
+  while ((c = getopt_long (argc, argv, "bfint:uvgS:TZ", long_options, NULL))
          != -1)
     {
       switch (c)
@@ -404,6 +478,11 @@ main (int argc, char **argv)
         case 'v':
           x.verbose = true;
           break;
+
+        case 'g':
+          progress = true;
+          break;
+
         case 'S':
           make_backups = true;
           backup_suffix = optarg;
